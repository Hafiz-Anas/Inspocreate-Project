{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getSinglePost } from './thunk';\nconst initialState = {\n  data: null,\n  loading: false,\n  error: null\n};\nexport const getSinglePostSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getSinglePost.pending, (state, {\n      payload\n    }) => {\n      state.data = null;\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(getSinglePost.fulfilled, (state, {\n      payload\n    }) => {\n      state.data = payload;\n      state.loading = false;\n      state.error = null;\n    });\n    builder.addCase(getSinglePost.rejected, (state, action) => {\n      if (action.payload) {\n        state.error = action.payload;\n      } else {\n        state.error = action.error;\n      }\n\n      state.loading = false;\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Digicrym/Documents/inspocreate/src/reducers/getSinglePost/slice.js"],"names":["createSlice","getSinglePost","initialState","data","loading","error","getSinglePostSlice","name","reducers","extraReducers","builder","addCase","pending","state","payload","fulfilled","rejected","action"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,SAA9B;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE,IADc;AAEpBC,EAAAA,OAAO,EAAE,KAFW;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAArB;AAMA,OAAO,MAAMC,kBAAkB,GAAGN,WAAW,CAAC;AAC7CO,EAAAA,IAAI,EAAE,MADuC;AAE7CL,EAAAA,YAF6C;AAG7CM,EAAAA,QAAQ,EAAE,EAHmC;AAI7CC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC3BA,IAAAA,OAAO,CAACC,OAAR,CAAgBV,aAAa,CAACW,OAA9B,EAAuC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC9DD,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACAU,MAAAA,KAAK,CAACT,OAAN,GAAgB,IAAhB;AACAS,MAAAA,KAAK,CAACR,KAAN,GAAc,IAAd;AACA,KAJD;AAKAK,IAAAA,OAAO,CAACC,OAAR,CAAgBV,aAAa,CAACc,SAA9B,EAAyC,CAACF,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAChED,MAAAA,KAAK,CAACV,IAAN,GAAaW,OAAb;AACAD,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACAS,MAAAA,KAAK,CAACR,KAAN,GAAc,IAAd;AACA,KAJD;AAKAK,IAAAA,OAAO,CAACC,OAAR,CAAgBV,aAAa,CAACe,QAA9B,EAAwC,CAACH,KAAD,EAAQI,MAAR,KAAmB;AAC1D,UAAIA,MAAM,CAACH,OAAX,EAAoB;AACnBD,QAAAA,KAAK,CAACR,KAAN,GAAcY,MAAM,CAACH,OAArB;AACA,OAFD,MAEO;AACND,QAAAA,KAAK,CAACR,KAAN,GAAcY,MAAM,CAACZ,KAArB;AACA;;AACDQ,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACA,KAPD;AAQA;AAvB4C,CAAD,CAAtC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { getSinglePost } from './thunk';\n\nconst initialState = {\n\tdata: null,\n\tloading: false,\n\terror: null,\n};\n\nexport const getSinglePostSlice = createSlice({\n\tname: 'post',\n\tinitialState,\n\treducers: {},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(getSinglePost.pending, (state, { payload }) => {\n\t\t\tstate.data = null;\n\t\t\tstate.loading = true;\n\t\t\tstate.error = null;\n\t\t});\n\t\tbuilder.addCase(getSinglePost.fulfilled, (state, { payload }) => {\n\t\t\tstate.data = payload;\n\t\t\tstate.loading = false;\n\t\t\tstate.error = null;\n\t\t});\n\t\tbuilder.addCase(getSinglePost.rejected, (state, action) => {\n\t\t\tif (action.payload) {\n\t\t\t\tstate.error = action.payload;\n\t\t\t} else {\n\t\t\t\tstate.error = action.error;\n\t\t\t}\n\t\t\tstate.loading = false;\n\t\t});\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}