{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from '../../axios/axios';\nexport const createCommentThunk = createAsyncThunk(`comments/createComment`, // Declare the type your function argument here:\nasync (data, thunkApi) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.post('/comments/create', data, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    console.log(response);\n    return response.data;\n  } catch (e) {\n    console.log(e.response);\n    return thunkApi.rejectWithValue(e.response);\n  }\n});\nexport const getCommentThunk = createAsyncThunk(`comments/postId/`, // Declare the type your function argument here:\nasync (postId, thunkApi) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios({\n      method: 'post',\n      url: '/comments/byPostId',\n      data: {\n        postId: postId\n      },\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    console.log(response);\n    return response.data;\n  } catch (e) {\n    console.log(e.response);\n    return thunkApi.rejectWithValue(e.response);\n  }\n});\nexport const replyCommentAction = createAsyncThunk(`comments/replyComment`, // Declare the type your function argument here:\nasync (data, thunkApi) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.post('/comments/reply', data, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    console.log(response);\n    return response.data;\n  } catch (e) {\n    console.log(e.response);\n    return thunkApi.rejectWithValue(e.response);\n  }\n});\nexport const likeCommentAction = createAsyncThunk(`comments/likeComment/`, // Declare the type your function argument here:\nasync (postId, thunkApi) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.post('/comments/like', {\n      commentId: postId\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    console.log(response);\n    return response.data;\n  } catch (e) {\n    console.log(e.response);\n    return thunkApi.rejectWithValue(e.response);\n  }\n});\nexport const dislikeCommentAction = createAsyncThunk(`comments/dislikeComment/`, // Declare the type your function argument here:\nasync (postId, thunkApi) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios({\n      method: 'delete',\n      url: '/comments/dislike',\n      data: {\n        commentId: postId\n      },\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    console.log(response);\n    return response.data;\n  } catch (e) {\n    console.log(e.response);\n    return thunkApi.rejectWithValue(e.response);\n  }\n});\nexport const deleteCommentAction = createAsyncThunk(`comments/deleteComment/`, // Declare the type your function argument here:\nasync (postId, thunkApi) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios({\n      method: 'delete',\n      url: '/comments',\n      data: {\n        postId: postId\n      },\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    console.log(response);\n    return response.data;\n  } catch (e) {\n    console.log(e.response);\n    return thunkApi.rejectWithValue(e.response);\n  }\n});","map":{"version":3,"sources":["C:/Users/Digicrym/Documents/inspocreate/src/reducers/comments/thunk.js"],"names":["createAsyncThunk","axios","createCommentThunk","data","thunkApi","token","localStorage","getItem","response","post","headers","Authorization","console","log","e","rejectWithValue","getCommentThunk","postId","method","url","replyCommentAction","likeCommentAction","commentId","dislikeCommentAction","deleteCommentAction"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from '../../axios/axios';\n\nexport const createCommentThunk = createAsyncThunk(\n\t`comments/createComment`,\n\t// Declare the type your function argument here:\n\tasync (data, thunkApi) => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem('token');\n\t\t\tconst response = await axios.post('/comments/create', data, {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Bearer ' + token,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconsole.log(response);\n\t\t\treturn response.data;\n\t\t} catch (e) {\n\t\t\tconsole.log(e.response);\n\t\t\treturn thunkApi.rejectWithValue(e.response);\n\t\t}\n\t}\n);\n\nexport const getCommentThunk = createAsyncThunk(\n\t`comments/postId/`,\n\t// Declare the type your function argument here:\n\tasync (postId, thunkApi) => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem('token');\n\n\t\t\tconst response = await axios({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: '/comments/byPostId',\n\t\t\t\tdata: {\n\t\t\t\t\tpostId: postId,\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Bearer ' + token,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconsole.log(response);\n\t\t\treturn response.data;\n\t\t} catch (e) {\n\t\t\tconsole.log(e.response);\n\t\t\treturn thunkApi.rejectWithValue(e.response);\n\t\t}\n\t}\n);\n\nexport const replyCommentAction = createAsyncThunk(\n\t`comments/replyComment`,\n\t// Declare the type your function argument here:\n\tasync (data, thunkApi) => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem('token');\n\t\t\tconst response = await axios.post('/comments/reply', data, {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Bearer ' + token,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconsole.log(response);\n\t\t\treturn response.data;\n\t\t} catch (e) {\n\t\t\tconsole.log(e.response);\n\t\t\treturn thunkApi.rejectWithValue(e.response);\n\t\t}\n\t}\n);\n\nexport const likeCommentAction = createAsyncThunk(\n\t`comments/likeComment/`,\n\t// Declare the type your function argument here:\n\tasync (postId, thunkApi) => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem('token');\n\t\t\tconst response = await axios.post(\n\t\t\t\t'/comments/like',\n\t\t\t\t{\n\t\t\t\t\tcommentId: postId,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: 'Bearer ' + token,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\t\tconsole.log(response);\n\t\t\treturn response.data;\n\t\t} catch (e) {\n\t\t\tconsole.log(e.response);\n\t\t\treturn thunkApi.rejectWithValue(e.response);\n\t\t}\n\t}\n);\n\nexport const dislikeCommentAction = createAsyncThunk(\n\t`comments/dislikeComment/`,\n\t// Declare the type your function argument here:\n\tasync (postId, thunkApi) => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem('token');\n\n\t\t\tconst response = await axios({\n\t\t\t\tmethod: 'delete',\n\t\t\t\turl: '/comments/dislike',\n\t\t\t\tdata: {\n\t\t\t\t\tcommentId: postId,\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Bearer ' + token,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconsole.log(response);\n\t\t\treturn response.data;\n\t\t} catch (e) {\n\t\t\tconsole.log(e.response);\n\t\t\treturn thunkApi.rejectWithValue(e.response);\n\t\t}\n\t}\n);\n\nexport const deleteCommentAction = createAsyncThunk(\n\t`comments/deleteComment/`,\n\t// Declare the type your function argument here:\n\tasync (postId, thunkApi) => {\n\t\ttry {\n\t\t\tconst token = localStorage.getItem('token');\n\n\t\t\tconst response = await axios({\n\t\t\t\tmethod: 'delete',\n\t\t\t\turl: '/comments',\n\t\t\t\tdata: {\n\t\t\t\t\tpostId: postId,\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Bearer ' + token,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconsole.log(response);\n\t\t\treturn response.data;\n\t\t} catch (e) {\n\t\t\tconsole.log(e.response);\n\t\t\treturn thunkApi.rejectWithValue(e.response);\n\t\t}\n\t}\n);\n"]},"metadata":{},"sourceType":"module"}