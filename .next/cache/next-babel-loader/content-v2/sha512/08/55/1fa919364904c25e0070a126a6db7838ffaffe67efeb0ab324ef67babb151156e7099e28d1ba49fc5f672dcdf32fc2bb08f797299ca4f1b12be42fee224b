{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getPostList, dislikePostAction, likePostAction, addToCollectionAction } from './thunk';\nconst initialState = {\n  data: [],\n  selected: [],\n  loading: false,\n  error: null\n};\nexport const postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getPostList.pending, (state, {\n      payload\n    }) => {\n      state.data = [];\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(getPostList.fulfilled, (state, {\n      payload\n    }) => {\n      state.data = payload.posts;\n      state.loading = false;\n      state.error = null;\n    });\n    builder.addCase(getPostList.rejected, (state, action) => {\n      if (action.payload) {\n        state.error = action.payload;\n      } else {\n        state.error = action.error;\n      }\n\n      state.loading = false;\n    });\n    builder.addCase(likePostAction.fulfilled, (state, {\n      payload\n    }) => {\n      state.data = state.data.map(post => {\n        if (post.id === payload.id) {\n          return payload;\n        } else {\n          return post;\n        }\n      });\n      state.loading = false;\n      state.error = null;\n    });\n    builder.addCase(dislikePostAction.fulfilled, (state, {\n      payload\n    }) => {\n      state.data = state.data.map(post => {\n        if (post.id === payload.id) {\n          return payload;\n        } else {\n          return post;\n        }\n      });\n      state.loading = false;\n      state.error = null;\n    });\n    builder.addCase(addToCollectionAction.fulfilled, (state, {\n      payload\n    }) => {\n      state.data = state.data.map(post => {\n        if (post.id === payload.id) {\n          return payload;\n        } else {\n          return post;\n        }\n      });\n      state.loading = false;\n      state.error = null;\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Digicrym/Documents/inspocreate/src/reducers/posts/slice.js"],"names":["createSlice","getPostList","dislikePostAction","likePostAction","addToCollectionAction","initialState","data","selected","loading","error","postSlice","name","reducers","extraReducers","builder","addCase","pending","state","payload","fulfilled","posts","rejected","action","map","post","id"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport {\n\tgetPostList,\n\tdislikePostAction,\n\tlikePostAction,\n\taddToCollectionAction,\n} from './thunk';\n\nconst initialState = {\n\tdata: [],\n\tselected: [],\n\tloading: false,\n\terror: null,\n};\n\nexport const postSlice = createSlice({\n\tname: 'posts',\n\tinitialState,\n\treducers: {},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(getPostList.pending, (state, { payload }) => {\n\t\t\tstate.data = [];\n\t\t\tstate.loading = true;\n\t\t\tstate.error = null;\n\t\t});\n\t\tbuilder.addCase(getPostList.fulfilled, (state, { payload }) => {\n\t\t\tstate.data = payload.posts;\n\t\t\tstate.loading = false;\n\t\t\tstate.error = null;\n\t\t});\n\t\tbuilder.addCase(getPostList.rejected, (state, action) => {\n\t\t\tif (action.payload) {\n\t\t\t\tstate.error = action.payload;\n\t\t\t} else {\n\t\t\t\tstate.error = action.error;\n\t\t\t}\n\t\t\tstate.loading = false;\n\t\t});\n\n\t\tbuilder.addCase(likePostAction.fulfilled, (state, { payload }) => {\n\t\t\tstate.data = state.data.map((post) => {\n\t\t\t\tif (post.id === payload.id) {\n\t\t\t\t\treturn payload;\n\t\t\t\t} else {\n\t\t\t\t\treturn post;\n\t\t\t\t}\n\t\t\t});\n\t\t\tstate.loading = false;\n\t\t\tstate.error = null;\n\t\t});\n\n\t\tbuilder.addCase(dislikePostAction.fulfilled, (state, { payload }) => {\n\t\t\tstate.data = state.data.map((post) => {\n\t\t\t\tif (post.id === payload.id) {\n\t\t\t\t\treturn payload;\n\t\t\t\t} else {\n\t\t\t\t\treturn post;\n\t\t\t\t}\n\t\t\t});\n\t\t\tstate.loading = false;\n\t\t\tstate.error = null;\n\t\t});\n\t\tbuilder.addCase(addToCollectionAction.fulfilled, (state, { payload }) => {\n\t\t\tstate.data = state.data.map((post) => {\n\t\t\t\tif (post.id === payload.id) {\n\t\t\t\t\treturn payload;\n\t\t\t\t} else {\n\t\t\t\t\treturn post;\n\t\t\t\t}\n\t\t\t});\n\t\t\tstate.loading = false;\n\t\t\tstate.error = null;\n\t\t});\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}